// Copyright 2018 ProximaX Limited. All rights reserved.
// Use of this source code is governed by the Apache 2.0
// license that can be found in the LICENSE file.

package sdk

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

var (
	addExchangeOfferTransactionSerializationCorr = []byte{0x9c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	addExchangeOfferTransactionToAggregateCorr = []byte{0x4c, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x2, 0x0, 0x0, 0x90, 0x5d, 0x41, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	addExchangeOfferTransactionSigningCorr = "9C000000B4C8A0226E525BE8491CA4361031BDEF3B6F8BAE46A45A6E57E2EBF3319A5E97346F794DF8B6ED31E8B6B47A64B0DC26833E236C41E286EB42A17C0028DA89011026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755020000905D41000000000000000000BAFD56000000000105AB7F077B327B8302000000000000000200000000000000000100000000000000"

	exchangeOfferTransactionSerializationCorr = []byte{0xb4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5d, 0x42, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24}

	exchangeOfferTransactionToAggregateCorr = []byte{0x64, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x90, 0x5d, 0x42, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xdd, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24}

	exchangeOfferTransactionSigningCorr = "B40000006102DCA0FED0DEFD41E6B605995295F3318E0DB314324202324A91069940DFF01E34C7E60D0EB4523FA89C4BBA1694986F47F29669F304B1064A48114BAD740D1026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755010000905D42000000000000000000BAFD56000000000105AB7F077B327B8302000000000000000200000000000000009A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24"

	removeExchangeOfferTransactionSerializationCorr = []byte{0x84, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x90, 0x5d, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xba, 0xfd, 0x56, 0x0, 0x0, 0x0, 0x0, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x0}

	removeExchangeOfferTransactionToAggregateCorr = []byte{0x34, 0x0, 0x0, 0x0, 0x9a, 0x49, 0x36, 0x64, 0x6, 0xac, 0xa9, 0x52, 0xb8, 0x8b, 0xad, 0xf5, 0xf1, 0xe9, 0xbe, 0x6c, 0xe4, 0x96, 0x81, 0x41, 0x3, 0x5a, 0x60, 0xbe, 0x50, 0x32, 0x73, 0xea, 0x65, 0x45, 0x6b, 0x24, 0x1, 0x0, 0x0, 0x90, 0x5d, 0x43, 0x1, 0x5, 0xab, 0x7f, 0x7, 0x7b, 0x32, 0x7b, 0x83, 0x0}

	removeExchangeOfferTransactionSigningCorr = "840000008F8EC54D31235751FCB6300E884439B7F8A41B4866CC109BB07F58F07E8ED831267A003D9A364E081F4A79B57E1417222B96DD5CCD813F3CD59B0035B8638C031026D70E1954775749C6811084D6450A3184D977383F0E4282CD47118AF37755010000905D43000000000000000000BAFD56000000000105AB7F077B327B8300"
)

func TestAddExchangeOfferTransactionSerialization(t *testing.T) {
	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			&AddOffer{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "AddExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionSerializationCorr, b)
}

func TestAddExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			&AddOffer{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionToAggregateCorr, b)
}

func TestAddExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash)
	assert.Nil(t, err)

	tx, err := NewAddExchangeOfferTransaction(
		fakeDeadline,
		[]*AddOffer{
			&AddOffer{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Duration: Duration(1),
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewAddExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, addExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("5f549777c56b7770f7cc238a08192cdcf28df7d1ae64410eb8023abb5961c4b9"), b.Hash)
}

func TestExchangeOfferTransactionSerialization(t *testing.T) {
	owner, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			&ExchangeConfirmation{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "ExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionSerializationCorr, b)
}

func TestExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)

	owner, err := NewAccountFromPublicKey("DD49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			&ExchangeConfirmation{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionToAggregateCorr, b)
}

func TestExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash)
	assert.Nil(t, err)

	owner, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)
	tx, err := NewExchangeOfferTransaction(
		fakeDeadline,
		[]*ExchangeConfirmation{
			&ExchangeConfirmation{
				Offer: Offer{
					Type:   SellOffer,
					Cost:   Amount(2),
					Mosaic: newMosaicPanic(StorageNamespaceId, Amount(2)),
				},
				Owner: owner,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, exchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("8fbcb42cf0e0ebac18ec7adafd81dadcce15421fc0aeb13d86d4a4c2d21698b5"), b.Hash)
}

func TestRemoveExchangeOfferTransactionSerialization(t *testing.T) {
	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			&RemoveOffer{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)

	b, err := tx.Bytes()

	assert.Nilf(t, err, "RemoveExchangeOfferTransaction.Bytes returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionSerializationCorr, b)
}

func TestRemoveExchangeOfferTransactionToAggregate(t *testing.T) {
	p, err := NewAccountFromPublicKey("9A49366406ACA952B88BADF5F1E9BE6CE4968141035A60BE503273EA65456B24", MijinTest)
	assert.Nil(t, err)

	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			&RemoveOffer{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)
	tx.Signer = p

	b, err := toAggregateTransactionBytes(tx)

	assert.Nilf(t, err, "toAggregateTransactionBytes returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionToAggregateCorr, b)
}

func TestRemoveExchangeOfferTransactionSigning(t *testing.T) {
	acc, err := NewAccountFromPrivateKey("787225aaff3d2c71f4ffa32d4f19ec4922f3cd869747f267378f81f8e3fcb12d", MijinTest, GenerationHash)
	assert.Nil(t, err)

	tx, err := NewRemoveExchangeOfferTransaction(
		fakeDeadline,
		[]*RemoveOffer{
			&RemoveOffer{
				Type:    SellOffer,
				AssetId: StorageNamespaceId,
			},
		},
		MijinTest,
	)
	assert.Nilf(t, err, "NewRemoveExchangeOfferTransaction returned error: %s", err)

	b, err := acc.Sign(tx)

	assert.Nilf(t, err, "Sign returned error: %s", err)
	assert.Equal(t, removeExchangeOfferTransactionSigningCorr, b.Payload)
	assert.Equal(t, stringToHashPanic("d005fa919c7fbf76f3dfff12ede0acd235c1927d3811f12c3fd7ff223be26f49"), b.Hash)
}
